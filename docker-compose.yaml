version: '3.9'

networks:
  app-networks:
    driver: bridge

volumes:
  rabbitmq-data:
    driver: local
  redis-data:
    driver: local
  postgresql-data:
    driver: local


services:
  db:
    image: postgres:18rc1-alpine
    container_name: postgres
    hostname: postgres
    ports:
      - ${POSTGRES_AMQP_PORTS_MAPPING}
    networks:
      - app-networks
    environment:
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DATABASE}
    volumes:
      - postgresql-data:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -U ${POSTGRES_USERNAME} -d ${POSTGRES_DATABASE}"
      interval: 10s
      timeout: 5s
      start_period: 5s
      retries: 5
    restart: always
  queue:
    image: rabbitmq:4.2-rc
    container_name: rabbit-mq
    hostname: rabbitmq
    ports:
      - ${RABBIT_AMQP_PORT_MAPPING}
      - ${RABBIT_GUI_PORT_MAPPING}
    networks:
      - app-networks
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/data
    healthcheck:
      test: rabbitmq-diagnostics -q status
      interval: 10s
      timeout: 5s
      start_period: 5s
      retries: 5
    restart: always
  cache:
    image: redis:8.2.1-alpine
    container_name: redis
    hostname: redis
    ports:
      - ${REDIS_AMQP_PORT_MAPPING}
    networks:
      - app-networks
    volumes:
      - redis-data:/var/lib/redis/data
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      start_period: 5s
      retries: 5
    restart: always